import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_displaymode/flutter_displaymode.dart';
import 'package:provider/provider.dart';
import '../l10n/app_localizations.dart';
import '../providers/locale_provider.dart';
import '../providers/theme_provider.dart';
import '../widgets/chat_preview.dart';
import '../widgets/xaneo_benefits_modal.dart';
import 'settings_detail_screen.dart';
import 'privacy_settings_screen.dart';
import 'security_settings_screen.dart';
import 'energy_saving_screen.dart';
import 'sessions_screen.dart';
import 'chat_screen.dart';

enum SettingsType {
  profileInfo,
  chatSettings,
  privacy,
  security,
  powerSaving,
  sessions,
  support,
  xaneoBenefits,
  language,
}

class MessengerDemoScreen extends StatefulWidget {
  const MessengerDemoScreen({super.key});

  @override
  State<MessengerDemoScreen> createState() => _MessengerDemoScreenState();
}

class _MessengerDemoScreenState extends State<MessengerDemoScreen>
    with TickerProviderStateMixin {
  int _selectedIndex = 0;
  int _previousIndex = 0;
  late PageController _pageController;
  late AnimationController _animationController;
  late AnimationController _iconColorController;
  late Animation<Color?> _iconColorAnimation;

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
  final TextEditingController _nameController = TextEditingController(text: 'demo');
  final TextEditingController _nicknameController = TextEditingController(text: 'demouser');
  final TextEditingController _phoneController = TextEditingController(text: '+7 (999) 123-45-67');
  // DateTime _birthDate = DateTime(1990, 5, 15); // –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ SettingsDetailScreen

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  final ScrollController _scrollController = ScrollController();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  int _selectedLanguageIndex = 5; // –ò–Ω–¥–µ–∫—Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–ø–∏—Å–∫–µ

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
  final List<Map<String, String>> _availableLanguages = [
    {'code': 'en', 'name': 'English'},
    {'code': 'es', 'name': 'Espa√±ol'},
    {'code': 'fr', 'name': 'Fran√ßais'},
    {'code': 'ja', 'name': 'Êó•Êú¨Ë™û'},
    {'code': 'ko', 'name': 'ÌïúÍµ≠Ïñ¥'},
    {'code': 'ru', 'name': '–†—É—Å—Å–∫–∏–π'},
    {'code': 'ar', 'name': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'},
    {'code': 'zh', 'name': '‰∏≠Êñá'},
  ];

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  bool _isHighRefreshRate = false;
  DisplayMode? _currentDisplayMode;

  // –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–æ–¥–∏–Ω —á–∞—Ç "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
  List<Map<String, dynamic>> _getFavoriteChats(AppLocalizations l10n) => [
    {
      'name': l10n.favoritesChat,
      'lastMessage': l10n.favoritesChatDescription,
      'time': '14:30',
      'unread': 0,
      'avatar': 'üîñ',
      'online': false,
    },
  ];

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  void _showLanguagePicker() {
    final l10n = AppLocalizations.of(context);
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black.withOpacity(0.5),
      isScrollControlled: true,
      enableDrag: true,
      isDismissible: true,
      useSafeArea: true,
      builder: (BuildContext context) {
        return Container(
          height: MediaQuery.of(context).size.height * 0.4,
          decoration: BoxDecoration(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade900 : Colors.white,
            borderRadius: const BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // –°–µ—Ä–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å–≤–µ—Ä—Ö—É (–∫–∞–∫ –≤ iOS)
              Container(
                margin: const EdgeInsets.only(top: 12, bottom: 20),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade600 : Colors.grey.shade400,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),

              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    CupertinoButton(
                      padding: EdgeInsets.zero,
                      child: Icon(
                        Icons.close,
                        color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
                        size: 24,
                      ),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                    Text(
                      l10n.selectLanguage,
                      style: TextStyle(
                        color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                        fontSize: 18,
                        fontFamily: 'Inter',
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    CupertinoButton(
                      padding: EdgeInsets.zero,
                      child: Icon(
                        Icons.check,
                        color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                        size: 24,
                      ),
                      onPressed: () {
                        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
                        final selectedLanguage = _availableLanguages[_selectedLanguageIndex];
                        final selectedLocale = Locale(selectedLanguage['code']!);
                        
                        // –ò–∑–º–µ–Ω—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ Provider
                        Provider.of<LocaleProvider>(context, listen: false).setLocale(selectedLocale);
                        
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // CupertinoPicker
              Expanded(
                child: CupertinoPicker(
                  backgroundColor: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade900 : Colors.white,
                  itemExtent: 40,
                  scrollController: FixedExtentScrollController(initialItem: _selectedLanguageIndex),
                  onSelectedItemChanged: (int index) {
                    _selectedLanguageIndex = index;
                  },
                  children: _availableLanguages.map((language) {
                    return Center(
                      child: Text(
                        language['name']!,
                        style: TextStyle(
                          color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                          fontSize: 16,
                          fontFamily: 'Inter',
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  void _showXaneoBenefitsModal() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black.withOpacity(0.5),
      isScrollControlled: true,
      enableDrag: true,
      isDismissible: true,
      useSafeArea: true,
      builder: (BuildContext context) {
        return const XaneoBenefitsModal();
      },
    );
  }

  @override
  void initState() {
    super.initState();

    _pageController = PageController(initialPage: _selectedIndex);
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–æ–∫
    _iconColorController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _iconColorAnimation = ColorTween(
      begin: Provider.of<ThemeProvider>(context, listen: false).isDarkMode ? Colors.white : Colors.black,
      end: Provider.of<ThemeProvider>(context, listen: false).isDarkMode ? Colors.white.withOpacity(0.6) : Colors.black.withOpacity(0.6),
    ).animate(CurvedAnimation(
      parent: _iconColorController,
      curve: Curves.easeInOut,
    ));

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    _setupHighRefreshRateDisplay();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —è–∑—ã–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _updateLanguageIndex();
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —è–∑—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
  void _updateLanguageIndex() {
    final localeProvider = Provider.of<LocaleProvider>(context, listen: false);
    final currentLocale = localeProvider.locale;
    
    if (currentLocale != null) {
      final index = _availableLanguages.indexWhere(
        (lang) => lang['code'] == currentLocale.languageCode
      );
      if (index != -1) {
        setState(() {
          _selectedLanguageIndex = index;
        });
      }
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Future<void> _setupHighRefreshRateDisplay() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final List<DisplayMode> modes = await FlutterDisplayMode.supported;

      // –ò—â–µ–º —Ä–µ–∂–∏–º —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      DisplayMode? highestMode;
      for (final mode in modes) {
        if (highestMode == null || mode.refreshRate > highestMode.refreshRate) {
          highestMode = mode;
        }
      }

      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∂–∏–º —Å —á–∞—Å—Ç–æ—Ç–æ–π > 60Hz, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
      if (highestMode != null && highestMode.refreshRate > 60.0) {
        await FlutterDisplayMode.setPreferredMode(highestMode);
        _currentDisplayMode = highestMode;
        _isHighRefreshRate = true;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        _setupHighRefreshRateAnimations();

        print('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${highestMode.refreshRate}Hz (${highestMode.width}x${highestMode.height})');
      } else {
        _isHighRefreshRate = false;
        print('‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (60Hz)');
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      _isHighRefreshRate = false;
    }
  }  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  void _setupHighRefreshRateAnimations() {
    // –î–ª—è —ç–∫—Ä–∞–Ω–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (_isHighRefreshRate) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
      _animationController.duration = const Duration(milliseconds: 250);
      _iconColorController.duration = const Duration(milliseconds: 300);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _iconColorAnimation = ColorTween(
        begin: Provider.of<ThemeProvider>(context, listen: false).isDarkMode ? Colors.white : Colors.black,
        end: Provider.of<ThemeProvider>(context, listen: false).isDarkMode ? Colors.white.withOpacity(0.6) : Colors.black.withOpacity(0.6),
      ).animate(CurvedAnimation(
        parent: _iconColorController,
        curve: Curves.easeInOutCubic, // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è
      ));
    }
  }

  @override
  void dispose() {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (_currentDisplayMode != null) {
      print('üì± –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${_currentDisplayMode!.refreshRate}Hz (${_currentDisplayMode!.width}x${_currentDisplayMode!.height})');
    }

    _pageController.dispose();
    _animationController.dispose();
    _iconColorController.dispose();
    _scrollController.dispose();
    _nameController.dispose();
    _nicknameController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  void _onItemTapped(int index) {
    if (_selectedIndex != index) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      _previousIndex = _selectedIndex;
      
      // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
      HapticFeedback.lightImpact();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏
      _iconColorController.forward(from: 0.0);
      
      // –ü–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º Telegram
      setState(() {
        _selectedIndex = index;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context);
    
    return Scaffold(
      backgroundColor: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.black : Colors.white,
      body: SafeArea(
        child: Column(
          children: [
            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å PageView –∏ Telegram-—Å—Ç–∏–ª–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            Expanded(
              child: GestureDetector(
                onHorizontalDragEnd: (details) {
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
                  if (details.primaryVelocity != null && details.primaryVelocity!.abs() > 300) {
                    if (details.primaryVelocity! < 0 && _selectedIndex == 0) {
                      // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é
                      _onItemTapped(1);
                    } else if (details.primaryVelocity! > 0 && _selectedIndex == 1) {
                      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É
                      _onItemTapped(0);
                    }
                  }
                },
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 350),
                  switchInCurve: Curves.easeInOutCubic,
                  switchOutCurve: Curves.easeInOutCubic,
                  transitionBuilder: (Widget child, Animation<double> animation) {
                    return FadeTransition(
                      opacity: animation,
                      child: SlideTransition(
                        position: Tween<Offset>(
                          begin: const Offset(0.1, 0.0),
                          end: Offset.zero,
                        ).animate(animation),
                        child: child,
                      ),
                    );
                  },
                  child: _selectedIndex == 0
                    ? Container(
                        key: const ValueKey<int>(0),
                        child: _buildMessengerContent(),
                      )
                    : Container(
                        key: const ValueKey<int>(1),
                        child: _buildProfileContent(),
                      ),
                ),
              ),
            ),
            
            // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            _buildBottomNavigation(l10n),
          ],
        ),
      ),
    );
  }

  double _getHorizontalPadding(BuildContext context) {
    final mediaQuery = MediaQuery.of(context);
    final screenWidth = mediaQuery.size.width;
    
    // –í –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º –ø–æ–ª—è —É–∂–µ
    if (mediaQuery.orientation == Orientation.landscape) {
      // –í –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ç—å —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª–µ–π
      return screenWidth * 0.25; // 25% –æ—Ç—Å—Ç—É–ø–æ–≤ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã = 50% —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª–µ–π
    } else {
      // –í –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–æ–ª—å—à–µ–π —à–∏—Ä–∏–Ω—ã
      return 6.0;
    }
  }

  Widget _buildMessengerContent() {
    final horizontalPadding = _getHorizontalPadding(context);
    final isDarkMode = Provider.of<ThemeProvider>(context).isDarkMode;
    
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 16),
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫
              Expanded(
                child: Center(
                  child: Text(
                    '',
                    style: TextStyle(
                      color: isDarkMode ? Colors.white : Colors.black,
                      fontFamily: 'Inter',
                      fontSize: 24,
                      fontWeight: FontWeight.w600,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
              
              // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: isDarkMode ? Colors.grey.shade800 : Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: IconButton(
                  icon: Icon(
                    Icons.search,
                    color: isDarkMode ? Colors.white : Colors.black,
                    size: 20,
                  ),
                  onPressed: () {
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
                    print('–ü–æ–∏—Å–∫ –Ω–∞–∂–∞—Ç');
                  },
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
          Expanded(
            child: ListView.builder(
              itemCount: _getFavoriteChats(AppLocalizations.of(context)).length,
              itemBuilder: (context, index) {
                final chat = _getFavoriteChats(AppLocalizations.of(context))[index];
                return _buildChatItem(chat);
              },
            ),
            ),
        ],
      ),
    );
  }  Widget _buildChatItem(Map<String, dynamic> chat) {
    final isDarkMode = Provider.of<ThemeProvider>(context).isDarkMode;
    
    return GestureDetector(
      onTap: () {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —á–∞—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–∞–∫ —É —ç–∫—Ä–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        Navigator.of(context).push(
          PageRouteBuilder(
            pageBuilder: (context, animation, secondaryAnimation) => ChatScreen(
              chatName: chat['name'],
              chatAvatar: chat['avatar'],
            ),
            transitionsBuilder: (context, animation, secondaryAnimation, child) {
              const begin = Offset(1.0, 0.0);
              const end = Offset.zero;
              const curve = Curves.ease;

              var tween = Tween(begin: begin, end: end).chain(
                CurveTween(curve: curve),
              );

              return SlideTransition(
                position: animation.drive(tween),
                child: child,
              );
            },
          ),
        );
      },
      child: Container(
        margin: const EdgeInsets.only(bottom: 8),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: isDarkMode ? Colors.black.withOpacity(0.1) : Colors.white.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
        children: [
          // –ê–≤–∞—Ç–∞—Ä
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: isDarkMode ? Colors.grey.shade800 : Colors.grey.shade200,
              borderRadius: BorderRadius.circular(25),
            ),
            child: Center(
              child: Text(
                chat['avatar'],
                style: TextStyle(
                  fontSize: 24,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
            ),
          ),
          
          const SizedBox(width: 12),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        chat['name'],
                        style: TextStyle(
                          color: isDarkMode ? Colors.white : Colors.black,
                          fontFamily: 'Inter',
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                    Text(
                      chat['time'],
                      style: TextStyle(
                        color: isDarkMode ? Colors.grey.shade400 : Colors.grey.shade600,
                        fontFamily: 'Inter',
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 4),
                
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        chat['lastMessage'],
                        style: TextStyle(
                          color: isDarkMode ? Colors.grey.shade300 : Colors.grey.shade700,
                          fontFamily: 'Inter',
                          fontSize: 14,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    if (chat['unread'] > 0)
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.blue,
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          chat['unread'].toString(),
                          style: const TextStyle(
                            color: Colors.white,
                            fontFamily: 'Inter',
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
              ],
            ),
          ),
          
          // –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
          if (chat['online'])
            Container(
              margin: const EdgeInsets.only(left: 8),
              width: 8,
              height: 8,
              decoration: const BoxDecoration(
                color: Colors.green,
                shape: BoxShape.circle,
              ),
            ),
        ],
      ),
    ));
  }

  Widget _buildProfileContent() {
    final l10n = AppLocalizations.of(context);
    final localeProvider = Provider.of<LocaleProvider>(context);
    final horizontalPadding = _getHorizontalPadding(context);
    
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
      child: NotificationListener<ScrollNotification>(
        onNotification: (ScrollNotification notification) {
          // –£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü
          if (notification is ScrollUpdateNotification) {
            final metrics = notification.metrics;
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö
            if (metrics.pixels <= 0 && notification.scrollDelta! < 0) {
              return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            }
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑
            if (metrics.pixels >= metrics.maxScrollExtent && notification.scrollDelta! > 0) {
              return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            }
          }
          
          return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        },
        child: SingleChildScrollView(
          controller: _scrollController,
          physics: const ClampingScrollPhysics(), // –ó–∞–º–µ–Ω—è–µ–º BouncingScrollPhysics –Ω–∞ ClampingScrollPhysics
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            /*Center(
              child: Text(
                l10n.profileDemo, // –í–º–µ—Å—Ç–æ l10n.profilePreviewTitle
              style: TextStyle(
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
                fontFamily: 'Inter',
                fontSize: 18,
                fontWeight: FontWeight.w400,
              ),
              textAlign: TextAlign.center,
            ),
          ),*/
          
          const SizedBox(height: 8),
          
          // –ü—Ä–µ–≤—å—é –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ–ª—å—à–æ–º —Ä–∞–∑–º–µ—Ä–µ
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.start, // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤–ª–µ–≤–æ
              children: [
                // –ê–≤–∞—Ç–∞—Ä–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                Container(
                  width: 70,
                  height: 70,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    gradient: LinearGradient(
                      colors: [Colors.blue.shade400, Colors.purple.shade400],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    border: Border.all(
                      color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade600 : Colors.grey.shade400,
                      width: 2,
                    ),
                  ),
                  child: Center(
                    child: Text(
                      'D',
                      style: TextStyle(
                        color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                        fontSize: 28,
                        fontFamily: 'Inter',
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12), // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å 20 –¥–æ 12
                
                // –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–Ω—è
                      Text(
                        _getDemoGreeting(l10n),
                        style: TextStyle(
                          color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade300 : Colors.grey.shade700,
                          fontFamily: 'Inter',
                          fontSize: 14,
                          fontWeight: FontWeight.w400,
                          height: 1.0, // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                        ),
                      ),
                      // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      Text(
                        'demo', // –í–º–µ—Å—Ç–æ _nameController.text
                        style: TextStyle(
                          color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                          fontFamily: 'Inter',
                          fontSize: 24,
                          fontVariations: [FontVariation('wght', 600)],
                        ),
                      ),
                      // –ù–∏–∫–Ω–µ–π–º
                      Text(
                        '@demouser', // –í–º–µ—Å—Ç–æ '@${_registerNicknameController.text}'
                        style: TextStyle(
                          color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade500 : Colors.grey.shade700,
                          fontFamily: 'Inter',
                          fontSize: 16,
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 10),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          Container(
            width: double.infinity,
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  l10n.settingsSection,
                  style: TextStyle(
                    color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                    fontSize: 18,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 8),
                _buildSettingsItem(l10n.personalInfo, Icons.person_outline),
                _buildSettingsItem(l10n.chatSettings, Icons.chat_bubble_outline),
                _buildSettingsItem(l10n.privacySettings, Icons.lock_outline),
                _buildSettingsItem(l10n.securitySettings, Icons.security_outlined),
                _buildSettingsItem(l10n.powerSettings, Icons.battery_saver_outlined),
                _buildSettingsItemLast(l10n.sessions, Icons.devices_outlined),
                
                const SizedBox(height: 12),
                
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                Container(
                  height: 1,
                  color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade700.withOpacity(0.5) : Colors.grey.shade400.withOpacity(0.5),
                  margin: const EdgeInsets.symmetric(vertical: 8),
                ),
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ï—â—ë"
                Text(
                  l10n.more,
                  style: TextStyle(
                    color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                    fontSize: 18,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 8),
                _buildSettingsItem(l10n.support, Icons.support_agent),
                _buildSettingsItem(l10n.xaneoBenefits, Icons.star_outline),
                _buildLanguageItem(l10n.languageSelect, _getLanguageNameFromLocale(localeProvider.locale, l10n)),
              ],
            ),
          ),
        ],
        ),
      ),
      ),
    );
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
  String _getDemoGreeting(AppLocalizations l10n) {
    final hour = DateTime.now().hour;
    
    if (hour >= 6 && hour < 12) {
      return l10n.goodMorning; // l10n.goodMorning
    } else if (hour >= 12 && hour < 18) {
      return l10n.goodDay; // l10n.goodDay
    } else if (hour >= 18 && hour < 22) {
      return l10n.goodEvening; // l10n.goodEvening
    } else {
      return l10n.goodNight; // l10n.goodNight
    }
  }

  Widget _buildBottomNavigation(AppLocalizations l10n) {
    return AnimatedBuilder(
      animation: _iconColorAnimation,
      builder: (context, child) {
        return Container(
          decoration: BoxDecoration(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.black : Colors.white,
            border: Border(
              top: BorderSide(
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white.withOpacity(0.1) : Colors.black.withOpacity(0.1),
                width: 0.5,
              ),
            ),
          ),
          child: SafeArea(
            child: SizedBox(
              height: 60,
              child: Row(
                children: [
                  // 
                  Expanded(
                    child: GestureDetector(
                      onTap: () => _onItemTapped(0),
                      behavior: HitTestBehavior.translucent,
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                        constraints: const BoxConstraints(minHeight: 48),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.chat,
                              size: 24,
                              color: _getIconColor(context, 0),
                            ),
                            SizedBox(height: 4),
                            Text(
                              l10n.messenger,
                              style: TextStyle(
                                color: _getIconColor(context, 0),
                                fontSize: 12,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  
                  // –ü—Ä–æ—Ñ–∏–ª—å
                  Expanded(
                    child: GestureDetector(
                      onTap: () => _onItemTapped(1),
                      behavior: HitTestBehavior.translucent,
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                        constraints: const BoxConstraints(minHeight: 48),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.person,
                              size: 24,
                              color: _getIconColor(context, 1),
                            ),
                            SizedBox(height: 4),
                            Text(
                              l10n.profile,
                              style: TextStyle(
                                color: _getIconColor(context, 1),
                                fontSize: 12,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Color _getIconColor(BuildContext context, int index) {
    final isDarkMode = Provider.of<ThemeProvider>(context, listen: false).isDarkMode;
    final activeColor = isDarkMode ? Colors.white : Colors.black;
    final inactiveColor = isDarkMode ? Colors.white.withOpacity(0.5) : Colors.black.withOpacity(0.5);
    
    if (_selectedIndex == index) {
      return activeColor;
    } else if (_previousIndex == index && _iconColorController.isAnimating) {
      // –í–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–∫–æ–Ω–∫–∞ –ø–ª–∞–≤–Ω–æ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç
      return _iconColorAnimation.value ?? inactiveColor;
    } else {
      return inactiveColor;
    }
  }

  Widget _buildSettingsItem(String title, IconData icon) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: GestureDetector(
        onTap: () => _onSettingsItemTap(title),
        behavior: HitTestBehavior.translucent,
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 12),
          constraints: const BoxConstraints(minHeight: 48),
          decoration: BoxDecoration(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade900.withOpacity(0.3) : Colors.grey.shade200.withOpacity(0.5),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade700.withOpacity(0.5) : Colors.grey.shade400.withOpacity(0.5),
              width: 1,
            ),
          ),
          child: Row(
            children: [
              Icon(
                icon,
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
                size: 20,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                    fontSize: 14,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Icon(
                Icons.chevron_right,
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade600 : Colors.grey.shade500,
                size: 20,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSettingsItemLast(String title, IconData icon) {
    return GestureDetector(
      onTap: () => _onSettingsItemTap(title),
      behavior: HitTestBehavior.translucent,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 12),
        constraints: const BoxConstraints(minHeight: 48),
        decoration: BoxDecoration(
          color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade900.withOpacity(0.3) : Colors.grey.shade200.withOpacity(0.5),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade700.withOpacity(0.5) : Colors.grey.shade400.withOpacity(0.5),
            width: 1,
          ),
        ),
        child: Row(
          children: [
            Icon(
              icon,
              color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
              size: 20,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                  fontSize: 14,
                  fontFamily: 'Inter',
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            Icon(
              Icons.chevron_right,
              color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade600 : Colors.grey.shade500,
              size: 20,
            ),
          ],
        ),
      ),
    );
  }

  void _onSettingsItemTap(String title) {
    final l10n = AppLocalizations.of(context);
    Widget content;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    if (title == l10n.personalInfo) {
      // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –ø–æ–ª–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => SettingsDetailScreen(
            title: title,
            showBirthDateField: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
          ),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.easeInOut;

            var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
            var offsetAnimation = animation.drive(tween);

            var fadeAnimation = Tween<double>(
              begin: 0.0,
              end: 1.0,
            ).animate(animation);

            return SlideTransition(
              position: offsetAnimation,
              child: FadeTransition(
                opacity: fadeAnimation,
                child: child,
              ),
            );
          },
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.chatSettings) {
      // –î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => SettingsDetailScreen(
            title: title,
            content: const ChatSettingsContent(),
          ),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.easeInOut;

            var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
            var offsetAnimation = animation.drive(tween);

            var fadeAnimation = Tween<double>(
              begin: 0.0,
              end: 1.0,
            ).animate(animation);

            return SlideTransition(
              position: offsetAnimation,
              child: FadeTransition(
                opacity: fadeAnimation,
                child: child,
              ),
            );
          },
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.privacySettings) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => PrivacySettingsScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.easeInOut;

            var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
            var offsetAnimation = animation.drive(tween);

            var fadeAnimation = Tween<double>(
              begin: 0.0,
              end: 1.0,
            ).animate(animation);

            return SlideTransition(
              position: offsetAnimation,
              child: FadeTransition(
                opacity: fadeAnimation,
                child: child,
              ),
            );
          },
          transitionDuration: const Duration(milliseconds: 300),
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.securitySettings) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) =>
              const SecuritySettingsScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.ease;

            var tween = Tween(begin: begin, end: end).chain(
              CurveTween(curve: curve),
            );

            return SlideTransition(
              position: animation.drive(tween),
              child: child,
            );
          },
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.powerSettings) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) =>
              const EnergySavingScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.ease;

            var tween = Tween(begin: begin, end: end).chain(
              CurveTween(curve: curve),
            );

            return SlideTransition(
              position: animation.drive(tween),
              child: child,
            );
          },
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.sessions) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–µ—Å—Å–∏–π
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) =>
              const SessionsScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            const begin = Offset(1.0, 0.0);
            const end = Offset.zero;
            const curve = Curves.ease;

            var tween = Tween(begin: begin, end: end).chain(
              CurveTween(curve: curve),
            );

            return SlideTransition(
              position: animation.drive(tween),
              child: child,
            );
          },
          transitionDuration: const Duration(milliseconds: 300),
        ),
      );
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞ —Ä–∞–Ω—å—à–µ
    } else if (title == l10n.support) {
      _showSupportModal();
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    } else if (title == l10n.xaneoBenefits) {
      _showXaneoBenefitsModal();
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    } else if (title == l10n.languageSelect) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
      _showLanguagePicker();
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    } else {
      content = _buildDefaultContent(title);
    }

    Navigator.of(context).push(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => SettingsDetailScreen(
          title: title,
          content: content,
        ),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(1.0, 0.0);
          const end = Offset.zero;
          const curve = Curves.easeInOut;

          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);

          var fadeAnimation = Tween<double>(
            begin: 0.0,
            end: 1.0,
          ).animate(CurvedAnimation(
            parent: animation,
            curve: curve,
          ));

          return SlideTransition(
            position: offsetAnimation,
            child: FadeTransition(
              opacity: fadeAnimation,
              child: child,
            ),
          );
        },
        transitionDuration: const Duration(milliseconds: 300),
      ),
    );
  }

  void _showSupportModal() {
    final l10n = AppLocalizations.of(context);
    final isDarkMode = Provider.of<ThemeProvider>(context).isDarkMode;

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black.withOpacity(0.5),
      isScrollControlled: true,
      enableDrag: true,
      isDismissible: true,
      useSafeArea: true,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return WillPopScope(
              onWillPop: () async {
                return true;
              },
              child: Padding(
                padding: EdgeInsets.only(
                  bottom: MediaQuery.of(context).viewInsets.bottom,
                ),
                child: Container(
                  constraints: BoxConstraints(
                    maxHeight: MediaQuery.of(context).size.height * 0.7,
                  ),
                  decoration: BoxDecoration(
                    color: isDarkMode ? Colors.grey.shade900 : Colors.white,
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(20),
                      topRight: Radius.circular(20),
                    ),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    child: SingleChildScrollView(
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          // –°–µ—Ä–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å–≤–µ—Ä—Ö—É (–∫–∞–∫ –≤ iOS)
                          Container(
                            margin: const EdgeInsets.only(bottom: 30),
                            width: 40,
                            height: 4,
                            decoration: BoxDecoration(
                              color: isDarkMode ? Colors.grey.shade600 : Colors.grey.shade400,
                              borderRadius: BorderRadius.circular(2),
                            ),
                          ),
                          // –ò–∫–æ–Ω–∫–∞
                          Container(
                            width: 80,
                            height: 80,
                            decoration: BoxDecoration(
                              color: isDarkMode ? Colors.grey.shade800 : Colors.grey.shade200,
                              shape: BoxShape.circle,
                            ),
                            child: Icon(
                              Icons.support_agent,
                              color: isDarkMode ? Colors.grey.shade400 : Colors.grey.shade600,
                              size: 40,
                            ),
                          ),
                          const SizedBox(height: 16),
                          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                          Text(
                            l10n.support,
                            style: TextStyle(
                              color: isDarkMode ? Colors.white : Colors.black,
                              fontSize: 20,
                              fontFamily: 'Inter',
                              fontWeight: FontWeight.w600,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 12),
                          // –û–ø–∏—Å–∞–Ω–∏–µ
                          Text(
                            l10n.supportContent,
                            style: TextStyle(
                              color: isDarkMode ? Colors.grey.shade300 : Colors.grey.shade700,
                              fontSize: 16,
                              fontFamily: 'Inter',
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 24),
                          // –ö–Ω–æ–ø–∫–∏
                          Row(
                            children: [
                              // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                              Expanded(
                                child: TextButton(
                                  onPressed: () => Navigator.of(context).pop(),
                                  style: TextButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(vertical: 16),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                  ),
                                  child: Text(
                                    l10n.cancel,
                                    style: TextStyle(
                                      color: isDarkMode ? Colors.grey.shade400 : Colors.grey.shade600,
                                      fontFamily: 'Inter',
                                      fontWeight: FontWeight.w500,
                                      fontSize: 16,
                                    ),
                                  ),
                                ),
                              ),
                              const SizedBox(width: 12),
                              // –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () {
                                    Navigator.of(context).pop();
                                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                                    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫—Ä—ã—Ç—å email –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: isDarkMode ? Colors.white : Colors.black,
                                    foregroundColor: isDarkMode ? Colors.black : Colors.white,
                                    padding: const EdgeInsets.symmetric(vertical: 16),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                  ),
                                  child: Text(
                                    l10n.contactSupport,
                                    style: const TextStyle(
                                      fontFamily: 'Inter',
                                      fontWeight: FontWeight.w600,
                                      fontSize: 16,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildDefaultContent(String title) {
    final l10n = AppLocalizations.of(context);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
            fontSize: 16,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 16),
        Text(
          l10n.contentInDevelopmentMessage(title),
          style: TextStyle(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
      ],
    );
  }

  Widget _buildLanguageItem(String title, String selectedLanguage) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: GestureDetector(
        onTap: () => _showLanguagePicker(), // –ò–∑–º–µ–Ω–µ–Ω–æ: –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        behavior: HitTestBehavior.translucent,
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 12),
          constraints: const BoxConstraints(minHeight: 48),
          decoration: BoxDecoration(
            color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade900.withOpacity(0.3) : Colors.grey.shade200.withOpacity(0.5),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade700.withOpacity(0.5) : Colors.grey.shade400.withOpacity(0.5),
              width: 1,
            ),
          ),
          child: Row(
            children: [
              Icon(
                Icons.language,
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade400 : Colors.grey.shade700,
                size: 20,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.white : Colors.black,
                    fontSize: 14,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Text(
                selectedLanguage,
                style: TextStyle(
                  color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade500 : Colors.grey.shade700,
                  fontSize: 14,
                  fontFamily: 'Inter',
                  fontWeight: FontWeight.w400,
                ),
              ),
              const SizedBox(width: 8),
              Icon(
                Icons.chevron_right,
                color: Provider.of<ThemeProvider>(context).isDarkMode ? Colors.grey.shade600 : Colors.grey.shade500,
                size: 20,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É –ª–æ–∫–∞–ª–∏
  String _getLanguageNameFromLocale(Locale? locale, AppLocalizations l10n) {
    if (locale == null) return l10n.russianLanguage; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    switch (locale.languageCode) {
      case 'en':
        return 'English';
      case 'es':
        return 'Espa√±ol';
      case 'fr':
        return 'Fran√ßais';
      case 'ja':
        return 'Êó•Êú¨Ë™û';
      case 'ko':
        return 'ÌïúÍµ≠Ïñ¥';
      case 'ru':
        return l10n.russianLanguage;
      case 'ar':
        return 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©';
      case 'zh':
        return '‰∏≠Êñá';
      case 'de':
        return 'Deutsch';
      case 'it':
        return 'Italiano';
      case 'pt':
        return 'Portugu√™s';
      default:
        return l10n.russianLanguage;
    }
  }
}
