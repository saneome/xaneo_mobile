#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python image_inverter.py

–°–∫—Ä–∏–ø—Ç:
1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ assets/img/
2. –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ assets/img/light/ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º '_light'
"""

import os
import sys
from pathlib import Path
from PIL import Image, ImageOps
import argparse

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
SUPPORTED_FORMATS = {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp'}

def invert_image_colors(image_path, output_path):
    """
    –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    Args:
        image_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(image_path) as img:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if img.mode == 'RGBA':
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ RGB –∫–∞–Ω–∞–ª—ã
                r, g, b, a = img.split()
                rgb_img = Image.merge('RGB', (r, g, b))
                inverted_rgb = ImageOps.invert(rgb_img)
                r_inv, g_inv, b_inv = inverted_rgb.split()
                inverted_img = Image.merge('RGBA', (r_inv, g_inv, b_inv, a))
            elif img.mode == 'LA':
                # –î–ª—è grayscale —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                l, a = img.split()
                inverted_l = ImageOps.invert(l)
                inverted_img = Image.merge('LA', (inverted_l, a))
            elif img.mode == 'P':
                # –î–ª—è palette –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB —Å–Ω–∞—á–∞–ª–∞
                rgb_img = img.convert('RGB')
                inverted_img = ImageOps.invert(rgb_img)
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
                rgb_img = img.convert('RGB')
                inverted_img = ImageOps.invert(rgb_img)

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_path.parent.mkdir(parents=True, exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–æ–º
            inverted_img.save(output_path, quality=95)

            print(f"‚úÖ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {image_path} ‚Üí {output_path}")
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {str(e)}")
        return False

def process_images(source_dir, target_dir, force=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.

    Args:
        source_dir (Path): –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        target_dir (Path): –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        force (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    """
    if not source_dir.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_dir}")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã —Å _light
    image_files = []
    for ext in SUPPORTED_FORMATS:
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ, –∏—Å–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏
        for img_file in source_dir.glob(f"*{ext}"):
            if img_file.is_file():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–º–µ—é—Ç —Å—É—Ñ—Ñ–∏–∫—Å _light
                if '_light' not in img_file.stem:
                    image_files.append(img_file)

    if not image_files:
        print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {source_dir}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –∏–º–µ—é—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞ '_light' –≤ –∏–º–µ–Ω–∏")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {source_dir}")
    print(f"üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {target_dir}")
    print("-" * 50)

    processed = 0
    skipped = 0

    for image_path in sorted(image_files):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        relative_path = image_path.relative_to(source_dir)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _light
        stem = relative_path.stem
        suffix = relative_path.suffix
        light_filename = f"{stem}_light{suffix}"

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_path = target_dir / light_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if output_path.exists() and not force:
            print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {output_path}")
            skipped += 1
            continue

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if invert_image_colors(image_path, output_path):
            processed += 1
        else:
            skipped += 1

    print("-" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {target_dir}")

def main():
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python image_inverter.py                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  python image_inverter.py --force           # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ
  python image_inverter.py --source ./assets/img --target ./assets/img/light

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, GIF, BMP, TIFF, WebP
        """
    )

    parser.add_argument(
        '--source', '-s',
        type=str,
        default='./assets/img',
        help='–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./assets/img)'
    )

    parser.add_argument(
        '--target', '-t',
        type=str,
        default='./assets/img/light',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./assets/img/light)'
    )

    parser.add_argument(
        '--force', '-f',
        action='store_true',
        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã'
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Pillow
    try:
        import PIL
        print(f"üñºÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Pillow –≤–µ—Ä—Å–∏–∏: {PIL.__version__}")
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install Pillow")
        sys.exit(1)

    print("üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Flutter")
    print("=" * 50)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏
    source_dir = Path(args.source)
    target_dir = Path(args.target)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∞–ø–∫–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π
    source_abs = source_dir.resolve()
    target_abs = target_dir.resolve()

    if target_abs.is_relative_to(source_abs):
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏—Å—Ö–æ–¥–Ω–æ–π!")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        print()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    process_images(source_dir, target_dir, args.force)

    print("\n" + "=" * 50)
    print("‚ú® –ì–æ—Ç–æ–≤–æ! –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã.")
    print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ pubspec.yaml –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.")

if __name__ == "__main__":
    main()
